<?php
/**
 * @file
 * Provides API integration with the Twitter microblogging service.
 */

define ('TWITTER_HOST',         'http://twitter.com');
define ('TWITTER_API',          'https://api.twitter.com');
define ('TWITTER_SEARCH',       'http://search.twitter.com');
define ('TWITTER_TINYURL',      'http://tinyurl.com');

/**
 * Implements hook_menu().
 */
function twitter_menu() {
  $items = array();

  $items['twitter/oauth'] = array(
    'title' => 'Twitter OAuth',
    'access callback' => TRUE,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('twitter_oauth_callback'),
    'type' => MENU_CALLBACK,
    'file' => 'twitter.pages.inc',
  );

  $items['admin/settings/twitter'] = array(
    'title' => 'Twitter',
    'description' => 'Twitter accounts and settings.',
    'page callback' => 'twitter_user_settings',
    'access arguments' => array('administer twitter accounts'),
    'file' => 'twitter.pages.inc',
  );

  $items['admin/settings/twitter/default'] = array(
    'title' => 'Twitter',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/settings/twitter/settings'] = array(
    'title' => 'Settings',
    'description' => 'Twitter settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('twitter_admin_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'twitter.pages.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['user/%user/edit/twitter'] = array(
    'title' => 'Twitter accounts',
    'page callback' => 'twitter_user_settings',
    'page arguments' => array(1),
    'access callback' => 'twitter_account_access',
    'weight' => 10,
    'file' => 'twitter.pages.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_perm().
 */
function twitter_perm() {
  return array(
    'add twitter accounts',
    'add authenticated twitter accounts',
    'administer twitter accounts',
  );
}

/**
 * Access callback for the Twitter accounts page.
 *
 * @return
 *   Boolean TRUE if the current user has access.
 */
function twitter_account_access() {
  return user_access('add twitter accounts') || user_access('add authenticated twitter accounts');
}

/**
 * Implements hook_theme().
 */
function twitter_theme() {
  return array(
    'twitter_account_list_form' => array(
      'arguments' => array('form' => NULL),
    ),
    'twitter_user_accounts' => array(
      'arguments' => array('accounts' => NULL),
    ),
  );
}

/**
 * Default callback for theme('twitter_user_accounts');
 *
 * Renders a list of Twitter accounts for the user profile page.
 */
function theme_twitter_user_accounts($accounts) {
  $items = array();
  foreach ($accounts as $twitter_account) {
    $tweets = twitter_tweets($twitter_account->screen_name);
    // If we have tweets for this Twitter account, link to the View. If not, link to Twitter.
    if (count($tweets)) {
      $items[] = l('@' . $twitter_account->screen_name, 'tweets/' . $twitter_account->screen_name);
    }
    else {
      $items[] = _twitter_user_profile($twitter_account->screen_name);
    }
  }
  return theme('item_list', $items);
}

/**
 * Very lightweight helper function to generate a TinyURL for a given post.
 */
function twitter_shorten_url($url) {
  if (module_exists('shorten')) {
    return shorten_url($url);
  }
  else {
    $response = drupal_http_request(variable_get('twitter_tinyurl', TWITTER_TINYURL) . "/api-create.php?url=" . $url);
    if ($response->code == 200) {
      return $response->data;
    }
    else {
      return $url;
    }
  }
}

/**
 * Implements hook_cron().
 *
 * Imports new Twitter statuses for site users, and deletes expired tweets.
 */
function twitter_cron() {
  if (!variable_get('twitter_import', TRUE)) {
    return;
  }

  // Check if we can connect to Twitter before proceeding.
  module_load_include('inc', 'twitter');
  $twitter = twitter_connect();
  if (!$twitter) {
   return;
  }

  // Pull up a list of Twitter accounts that are flagged for updating,
  // sorted by how long it's been since we last updated them. This ensures
  // that the most out-of-date accounts get updated first.
  module_load_include('inc', 'twitter');
  $sql  = "SELECT twitter_uid
           FROM {twitter_account}
           WHERE uid <> 0 AND import = 1
           ORDER BY last_refresh ASC";
  $result = db_query_range($sql, 0, 20);
  try {
    while ($account = db_fetch_object($result)) {
      $twitter_account = twitter_account_load($account->twitter_uid);
      // Fetch tweets and mentions.
      twitter_fetch_user_timeline($twitter_account->id);
      if ($twitter_account->is_auth() && $twitter_account->mentions) {
        twitter_fetch_mentions_timeline($twitter_account->id);
      }
      // Mark the time this account was updated.
      db_query("UPDATE {twitter_account} SET last_refresh = %d WHERE twitter_uid=%d", $_SERVER['REQUEST_TIME'], $twitter_account->id);
    }
  } catch (TwitterException $e) {
    // The exception has already been logged so we do not need to do anything here apart from catching it.
  }

  // Nuke old statuses.
  if ($age = variable_get('twitter_expire', 0)) {
    db_query('DELETE FROM {twitter} WHERE created_time < %d', time() - $age);
  }
}


/**
 * Implementation of hook_filter().
 * - Twitter @username converter:
 *     Converts Twitter-style @usernames into links to Twitter account pages.
 * - Twitter #hashtag converter:
 *     Converts Twitter-style #hashtags into links to hashtags.org.
 * - Twitter link converter:
 *     Makes links to be opened in new pages and adds nofollow attribute.
 * Implements hook_filter_info().
 */
function twitter_filter($op, $delta = 0, $format = -1, $text = '') {
  switch ($op) {
    case 'list':
      return array(0 => t('Twitter @username converter'), 1 => t('Twitter #hashtag converter'));

    case 'description':
      switch ($delta) {
        case 0:
          return t('Converts Twitter-style @usernames into links to Twitter account pages.');
        case 1:
          return t('Converts Twitter-style #hashtags into links to hashtags.org.');
        case 2:
          return t('Adds rel="nofollow" and target="_blank" to all links within a Tweet.');
        default:
          return;
      }
    case 'process':
      switch ($delta) {
        case 0:
          return _twitter_filter_username($text);
        case 1:
          return _twitter_filter_hashtag($text);
        case 2:
          return _twitter_filter_link($text);
        default:
          return $text;
      }
    default:
      return $text;
  }
}

/**
 * Implements hook_filter_tips().
 */
function twitter_filter_tips($delta, $format, $long = FALSE) {
  global $base_url;
  switch ($delta) {
    case 0:
      return t('Twitter-style @usersnames are linked to their Twitter account pages.');
    case 1:
      return t('Twitter-style #hashtags are linked to !url.', array('!url' => '<a href="http://search.twitter.com/">search.twitter.com</a>'));
    case 2:
      return t('Twitter links within a message are opened in new tabs and have nofollo attribute.');
  }
}

/**
 * Callback for twitter @username converter.
 */
function _twitter_filter_username($text) {
  $prefix = '@';
  $destination = variable_get('twitter_host', TWITTER_HOST) . '/';
  return _twitter_filter_text($text, $prefix, $destination);
}

/**
 * Callback for twitter #hashtag converter.
 */
function _twitter_filter_hashtag($text) {
  $prefix = '#';
  $destination = variable_get('twitter_search', TWITTER_SEARCH) . '/search?q=%23';
  return _twitter_filter_text($text, $prefix, $destination);
}

/**
 * This helper function converts Twitter-style @usernames and #hashtags into
 * actual links.
 */
function _twitter_filter_text($text, $prefix, $destination) {
  $matches = array(
    '/\>' . $prefix . '(\w+)/ui',
    '/^' . $prefix . '(\w+)/ui',
    '/(\s+)' . $prefix . '(\w+)/ui',
  );
  $replacements = array(
    '><a href="' . $destination . '${1}">' . $prefix . '${1}</a>',
    '<a href="' . $destination . '${1}">' . $prefix . '${1}</a>',
    '${1}<a href="' . $destination . '${2}">' . $prefix . '${2}</a>',
  );
  return preg_replace($matches, $replacements, $text);
}

/**
 * Callback for twitter link converter.
 *
 * Makes links to be opened in new tabs and not to be indexed by SEO scrappers.
 */
function _twitter_filter_link($text) {
  return str_replace("<a ", '<a target="_blank" rel="nofollow" ', $text);
}

/**
 * Implements hook_views_api().
 */
function twitter_views_api() {
  return array('api' => 2);
}

/**
 * Implements hook_user().
 */
function twitter_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'load':
      $account->twitter_accounts = module_invoke_all('twitter_accounts', $account);
      break;
    case 'delete':
      foreach ($account->twitter_accounts as $twitter_account) {
        twitter_account_delete($twitter_account->id);
      }
      break;
    case 'view':
      if (!empty($account->twitter_accounts)) {
        $account->content['summary']['twitter'] = array(
          '#title' => t('Twitter accounts'),
          '#type' => 'user_profile_item',
          '#weight' => 10,
          '#value' => theme('twitter_user_accounts', $account->twitter_accounts),
        );
      }
      break;
  }
}

/**
 * Implements hook_twitter_accounts().
 *
 * @return
 *   array with Twitter accounts
 */
function twitter_twitter_accounts($account) {
  module_load_include('inc', 'twitter');

  $twitter_accounts = array();

  $sql = "SELECT twitter_uid FROM {twitter_account} WHERE uid = %d";
  $results = db_query($sql, $account->uid);

  while ($row = db_fetch_array($results)) {
    $key = $row['twitter_uid'];
    $twitter_accounts[] = twitter_account_load($key);
  }
  return $twitter_accounts;
}

/**
 * Checks if the Twitter Application keys are set.
 *
 * @return
 *   boolean TRUE if both the Twitter Application key and secret are set.
 */
function twitter_api_keys() {
  $key = variable_get('twitter_consumer_key', NULL);
  $secret = variable_get('twitter_consumer_secret', NULL);
  return !(empty($key) && empty($secret));
}

/**
 * Helper to build a Twitter profile URL
 */
function _twitter_user_profile($screen_name) {
  return l('@' . $screen_name, TWITTER_HOST . '/' . $screen_name);
}
