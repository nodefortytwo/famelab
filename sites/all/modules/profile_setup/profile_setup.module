<?php
// $Id: profile_setup.module,v 1.6.8.2.4.5 2009/10/14 02:48:26 thomjjames Exp $

/**
 * @file
 * This module directs users to complete profile fields when they first login to a Drupal site
 *
 */
 
/**
*  pageroute hook of page types
*/
function profile_setup_pageroute_info() {
  return array(
    'profile_setup' => array(
      'profile_picture' => 'profile_setup.page_profile_picture',  // multiple page types can be in the same include file
      'username_change' => 'profile_setup.page_username_change',
      'account_category' => 'profile_setup.page_account_category',
    )
  );
}

/**
 * hook_perm
 */
function profile_setup_perm() {
  return array('use profile setup');
}


/**
 * Implementation of hook_menu().
 */
function profile_setup_menu() {
  global $user;

  $items = array();
  $items['admin/user/profilesetup'] = array(
    'title' => 'Profile Setup',
    'description' => t('Create customizable the profile setup module.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('profile_setup_settings'),
    'access callback' => 'profile_setup_access_check',
    'access arguments' => array('admin'),
  );

  return $items;
}

/**
 * Access control helper for hook_menu
 */
function profile_setup_access_check($type = 'normal') {
  global $user;
  if ($type == 'normal') {
    return $user->uid > 0 || user_access('administer users');
  }
  else if ($type == 'admin') {
    return user_access('administer users');
  }
}

/**
 * admin settings page
 */
function profile_setup_settings() {
  if ($path = profile_setup_pageroute_url()) {
    $url = url($path, array('absolute' => TRUE));
  }
  $info = t('The profile setup module will automatically guide users through the initial setup of their profile with the help of the pageroute module.') .'<br />';
  $info .= t('The profile setup modules provides new forms for the pageroute module; profile picture upload, username change and account category. This allows you to create custom user workflows using the profile module or the content profile module.') .'<br /><br />';
  if ($url) {
    $info .= t('You can allow users to be guided through the profile setup at any stage by accessing the URL:<br /> !profilesetup', array('!profilesetup' => l($url, $url)));
  }
  $info = str_replace('pageroute module', l(t('pageroute module'), 'admin/build/pageroute'), $info);
  $form['info'] = array(
    '#type' => 'fieldset',
    '#title' => t('Information')
  );
  $form['info']['explain'] = array(
    '#type' => 'markup',
    '#value' => $info
  );
  
  if (module_exists('pageroute')) {
    $pageroutes[] = ' - ';
	$result = db_query("SELECT * FROM {pageroute_routes} ORDER BY path");
    while ($route = db_fetch_object($result)) {
      $pageroutes[$route->prid] = $route->path;
    }
  }
  $form['settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('General settings')
  );
  
  $form['settings']['profile_setup_intro_message'] = array(
    '#type' => 'textarea',
    '#title' => t('Introduction message'),
	'#default_value' => filter_xss(variable_get('profile_setup_intro_message', '')),
	'#description' => t('Optional: On login or registration you can provide a message to display to users when they start the profile setup workflow.')
  );  
  
  if ($pageroutes) {
    $description = t('The pageroute module "route" that should be used for the profile setup workflow.');
    $description .= '<br />'. t('If you want to provide a different pageroute per user role then you will need to do this redirect using the rules module depending on the users role.');
    $description = str_replace('pageroute module', l(t('pageroute module'), 'admin/build/pageroute'), $description);
    $form['settings']['profile_setup_pageroute'] = array(
	  '#type' => 'select',
	  '#title' => t('The profile setup pageroute'),
	  '#options' => $pageroutes,
	  '#required' => true,
	  '#default_value' => variable_get('profile_setup_pageroute', ''),
	  '#description' => $description,
    );	
  }
  else {
    $description = t('You must install the pageroute module and create a pageroute to use for the profile setup workflow in order to use this module!');
    $description = str_replace('pageroute module', l(t('pageroute module'), 'admin/build/pageroute'), $description);
    $form['settings']['profile_setup_pageroute_error'] = array(
	  '#value' => $description
    );
  }

  return system_settings_form($form);
}

/**
 * Implementation of hook_form_alter().
 */
function profile_setup_form_alter(&$form, &$form_state, $form_id) {
  // add new submit handler for user_register form so we can redirect users after registration
  if ($form_id == 'user_register' || $form_id == 'user_login' || $form_id == 'user_login_block') {
    $form['#submit'][] = 'profile_setup_user_form_submit';
  }
  if ($form_id == 'user_login_block') {
    //rework login block destination
	$form['#action'] = url($_GET['q']);
	$form['default_destination'] = array(
	  '#value' => url($_GET['q']),
	  '#type' => 'hidden'
	); 
  }
}	

/**
 * Implementation of hook_user().
 */
function profile_setup_user($op, &$edit, &$account, $category = NULL) {
  global $user;

  switch ($op) {
    case 'login':
      //redirecting on login or insert prevents other modules from working so we add a register form submit handler instead
      if ($user->uid == $account->uid) {
        _update_login($account);
      }
      break;

    case 'view':
      if ($user->uid == $account->uid) {
        //in theory this should never to execute 
		if ($path = profile_setup_should_redirect($account)) {
          _update_login($account);
          drupal_goto($path);
        }
      }
      break;

    case 'load':
      $account->logins = db_result(db_query("SELECT logins FROM {profile_setup} WHERE uid = %d", $account->uid));
      break;

    case 'insert':
      //account created so add user to DB table so we can count logins
      db_query('INSERT INTO {profile_setup} (uid, logins) VALUES (%d, 0)', $account->uid);
      break;

    case 'delete':
      db_query('DELETE FROM {profile_setup} WHERE uid = %d', $account->uid);
      break;
  }
}

/**
 * determines the URL of the profile setup pageroute 
 */
function profile_setup_pageroute_url($nomessages = false) {
  $prid = variable_get('profile_setup_pageroute', '');
  if (!empty($prid)) {
    if ($path = db_result(db_query("SELECT path FROM {pageroute_routes} WHERE prid = %d", $prid))) {
      return $path;
    }
    elseif (!nomessages) {
      drupal_set_message(t('The pageroute selected for the profile setup workflow does not exist.'));
    }
  }
  else if (user_access('administer users')) {
    drupal_set_message(t('No pageroute was selected for the profile setup workflow.'));
  }
  return false;
}

/**
 * Submits the user registration form
 * redirect users after registration
 */
function profile_setup_user_form_submit($form, &$form_state) {
  global $user;

  //redirect users
  if ($path = profile_setup_should_redirect($user)) {
	$form_state['redirect'] = $path;
	return;	
  }
  elseif ($form_state['form_id'] == 'user_login_block') {
    //shouldn't redirect then make it redirect to the same page
	$form_state['redirect'] = $form_state['default_destination'];
	return;
  }
}

/**
 * should the user be redirected to the profile setup workflow?
 */
function profile_setup_should_redirect($account = '') {
  global $user;
  $account = empty($account) ? $user : $account;
  
  $path = profile_setup_pageroute_url(true);
  if ($path && user_access('use profile setup', $account) && $user->logins == '0') {
    if ($intro = variable_get('profile_setup_intro_message', '')) {
	  drupal_set_message(filter_xss($intro));
	}
	return $path;
  }
  return false;
} 

/**
 * update user logins counter
 */
function _update_login($account) {
  if (db_result(db_query("SELECT COUNT(logins) FROM {profile_setup} WHERE uid = %d", $account->uid))) {
    db_query("UPDATE {profile_setup} SET logins = logins + 1 WHERE uid = %d", $account->uid);
  }
  else {
    db_query('INSERT INTO {profile_setup} (uid, logins) VALUES (%d, 1)', $account->uid);
  }
}
